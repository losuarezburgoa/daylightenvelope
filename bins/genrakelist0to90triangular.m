## -*- texinfo -*- 
## @deftypefn {} {@var{rArray} =} genrakelist0to90triangular (@var{d}, 
##     @var{dleNpts}, var{wantRecomm}, var{minNumPoints})
##
## Description.
## Generates an array (list) of @var{dleNpts} rake-angles from 0 to 90 degrees, 
## of a plane dipping eastwards and with dip (@var{d}) according to an empirical
## function created with the curve analysis made in the function 
## 'dip2rakeofmaxcurvature' (or the specified in the article about this)
## and the use of the triangular 'probabilistic density function' function.
## The generation have the intension to make smoot curves of the daylight
## evelope with few points.
##
## If the flag @var{wantRecomm} is set to 'true', the @var{dleNpts} value is 
## ommited and the function recommends a value with the 'dip2maxpoints' function.
## The user can also set the minimum number of points to be considered to add
## to the recommended value, this with variable @var{minNumPoints}.
## The function returns a vector with a variable length, depending on the 
## input options, of rake-values to be used in the generation of the daylight
## envelope.
##
## Input(s):
## The dip of the plane (in degrees) for which the rake point-distribution is 
## wanted to obtain, @var{d}.
##
## Output(s):
## The rake array of point-distribution generated by the empirical functions and
## the triangular PDF, @var{rArray}.
##
## @seealso{genrakelist0to90uniform, genrakelist0to90saltbox, 
##     dip2rakeofmaxcurvature, dip2maxpoints, rndtriang}
## @end deftypefn

## Author: Ludger O. Suarez-Burgoa <losuarezb@unal.edu.co>
## Created: 2022-02-24

function rArray = genrakelist0to90triangular (d, dleNpts=45, wantRecomm=false, ...
        minNumPoints=3)
    # Location of the mode: the rake value where the maximum curvature exists.
    c = dip2rakeofmaxcurvature(d);
    # Number of maximum points.
    if wantRecomm
        n = minNumPoints + dip2maxpoints (d, dleNpts);
        %display(sprintf("Recomended number of points is: %d", n));
    else
        if dleNpts < minNumPoints
            error('Minimum points is 3!');
        else
            n = dleNpts;
        endif
    endif
    # Using the function 'rndtriang' which is a generator of random (or ordered 
    # if the flag 'lin' is set) distribution of points in the real-line. Rake 
    # varies  symmetrically between [0, 90] degrees.
    rArray = rndtriang (0, 90, c, n, 'lin');
endfunction
## Copyright (C) 2022 Ludger Suarez-Burgoa & Universidad Nacional de Colombia.
## BSD-3 License.
## https://opensource.org/licenses/BSD-3-Clause